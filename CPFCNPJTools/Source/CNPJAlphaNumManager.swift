//
//  CNPJANValidator.swift
//  ExampleApp
//
//  Created by Diggo Silva on 15/12/24.
//

import Foundation

/// Enum representing the different statuses of a CNPJ Alphanumeric after validation.
public enum CNPJAlphaNumStatus {
    case valid         // Valid CNPJ Alphanumeric.
    case invalid       // Invalid CNPJ Alphanumeric.
    case cnpjNull      // CNPJ Alphanumeric cannot be null or empty.
    case equalDigits   // CNPJ Alphanumeric with repeated digits is not valid (e.g., 11.111.111/1111-11, which is invalid because it's a repeated number).
    case invalidFormat // Invalid CNPJ.\nCNPJ Alphanumeric must have 14 digits (only numbers and letters).
}

/// The `CNPJAlphaNumManager` class is responsible for validating, generating, and formatting CNPJ Alphanumeric (Brazilian National Registry of Legal Entities).
///
/// It provides methods to validate a CNPJ Alphanumeric, generate fake CNPJ Alphanumeric, format a CNPJ Alphanumeric into a readable format, and apply a mask to the CNPJ Alphanumeric.
public class CNPJAlphaNumManager {

    public init() {}
    
    /// Validates a given CNPJ Alphanumeric, checking if it is valid, properly formatted, and if the verification digits are correct.
    ///
    /// - Parameter cnpjAlphaNum: The CNPJ Alphanumeric to be validated. It may contain non-numeric characters (dots, slashes, hyphens, etc.).
    /// - Returns: A `CNPJAlphaNumStatus` value indicating the validation status.
    ///
    /// The `CNPJStatus` enum can have the following values:
    /// - `.valid`: Indicates the CNPJ Alphanumeric is valid.
    /// - `.invalid`: Indicates the CNPJ Alphanumeric is invalid.
    /// - `.cnpjNull`: Indicates the CNPJ Alphanumeric is empty.
    /// - `.invalidFormat`: Indicates the CNPJ Alphanumeric has an invalid format (wrong number of digits, contains letters, etc.).
    /// - `.equalDigits`: Indicates the CNPJ Alphanumeric contains the same digit repeated (e.g., "111.111.111/1111-11").
    ///
    /// **Example:**
    /// ```swift
    /// let cnpjAlphaNumManager = CNPJAlphaNumManager()
    /// let status = cnpjAlphaNumManager.validate(cnpjAlphaNum: "12.ABC.345/01DE-35")
    /// print(status)  // .valid or .invalid
    /// ```
    /// * Important: *
    /// This method removes any non-alphanumeric characters before validating the CNPJ Alphanumeric. It validates CNPJs that may include letters (A-Z) in addition to digits (0-9).
    public func validate(cnpjAlphaNum: String) -> CNPJAlphaNumStatus {
        // Clears the CPF, removing non-alphanumeric characters
        let cleanedCNPJ = cnpjAlphaNum.replacingOccurrences(of: "[^0-9A-Z]", with: "", options: .regularExpression)
        
        guard cleanedCNPJ.count > 0 else { return .cnpjNull }
        
        // Checks if the CPF has 14 digits
        guard cleanedCNPJ.count == 14 else { return .invalidFormat }
        
        // Checks if all digits are the same
        if Set(cleanedCNPJ).count == 1 { return .equalDigits }
        
        // Divides the CNPJ into the first 12 digits and the last 2 (verification digits)
        let cnpjBaseDigits = cleanedCNPJ.prefix(12).compactMap({ Int($0.asciiValue!) - 48 })
        let providedCheckDigits = cleanedCNPJ.suffix(2).compactMap({ Int(String($0)) })
                
        // Weights for the last 2 digits
        let multiplyFirstBy = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2]
        let multiplySecondBy = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2]
        
        // Calculates the first verification digit
        let calculated1stCheckDigit = Double(calculateCNPJAlphaNumCheckSum(cnpj12Digits: cnpjBaseDigits, multiplyBy: multiplyFirstBy)).truncatingRemainder(dividingBy: 11)
        let firstCheckDigit = calculated1stCheckDigit < 2 ? 0 : 11 - Int(calculated1stCheckDigit)
        
        // Calculates the second verification digit
        let calculated2ndCheckDigit = Double(calculateCNPJAlphaNumCheckSum(cnpj12Digits: cnpjBaseDigits + [firstCheckDigit], multiplyBy: multiplySecondBy)).truncatingRemainder(dividingBy: 11)
        let secondCheckDigit = calculated2ndCheckDigit < 2 ? 0 : 11 - Int(calculated2ndCheckDigit)
        
        // Compares the calculated verification digits with the provided ones
        if  firstCheckDigit == providedCheckDigits.first, secondCheckDigit == providedCheckDigits.last {
            return .valid
        } else {
            return .invalid
        }
    }
    
    /// Generates a random valid CNPJ Alphanumeric, without formatting.
    ///
    /// - Returns: A valid CNPJ Alphanumeric, but unformatted.
    ///
    /// - Warning: The CNPJ Alphanumeric generated by this method is **valid** (based on CNPJ Alphanumeric validation rules), but **it is not a real CNPJ Alphanumeric**.
    ///   It does not correspond to a real company and should **not be used for any fraudulent, illegal, or deceptive purposes**.
    ///   This method is intended solely for **testing or simulation purposes** in development and software testing environments.
    ///
    /// **Example:**
    /// ```swift
    /// let cnpjAlphaNumManager = CNPJAlphaNumManager()
    /// let fakeCNPJAlphaNum = cnpjAlphaNumManager.generate()
    /// print(fakeCNPJAlphaNum)  // Randomly generated CNPJ Alphanumeric
    /// ```
    public func generate() -> String {
        let get12RandomAlphaNumbers = (0..<12).compactMap({ _ in
            
            let isLetter = Bool.random()
            let randomValue: UInt8
            
            if isLetter {
                randomValue = UInt8.random(in: 65...90)
            } else {
                randomValue = UInt8.random(in: 48...57)
            }
            return Character(UnicodeScalar(randomValue))
        })
        
        var randomCNPJString = String(get12RandomAlphaNumbers)
        
        var cnpj12Digits: [Int] = []
        
        for char in randomCNPJString {
            if let asciiValue = char.asciiValue {
                let valueASCII = asciiValue - 48
                cnpj12Digits.append(Int(valueASCII))
            }
        }
        
        let multiplyFirstBy = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2]
        let multiplySecondBy = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2]
        
        //MARK: Calcula 1º Dígito
        let calculated1stCheckDigit = Double(calculateCNPJAlphaNumCheckSum(cnpj12Digits: cnpj12Digits, multiplyBy: multiplyFirstBy)).truncatingRemainder(dividingBy: 11)
        calculated1stCheckDigit < 2 ? cnpj12Digits.append(0) : cnpj12Digits.append(11 - Int(calculated1stCheckDigit))
        
        //MARK: Calcula 2º Dígito
        let calculated2ndCheckDigit = Double(calculateCNPJAlphaNumCheckSum(cnpj12Digits: cnpj12Digits, multiplyBy: multiplySecondBy)).truncatingRemainder(dividingBy: 11)
        calculated2ndCheckDigit < 2 ? cnpj12Digits.append(0) : cnpj12Digits.append(11 - Int(calculated2ndCheckDigit))
        
        let generatedFakeCNPJ = cnpj12Digits.map({ String($0) }).joined()
        randomCNPJString = randomCNPJString + String(generatedFakeCNPJ.suffix(2))
        return format(randomCNPJString) ?? ""
    }
    
    private func format(_ cnpjAlphaNum: String) -> String? {
        guard cnpjAlphaNum.count == 14 else { return nil }
        let formatted = "\(cnpjAlphaNum.prefix(2)).\(cnpjAlphaNum.dropFirst(2).prefix(3)).\(cnpjAlphaNum.dropFirst(5).prefix(3))/\(cnpjAlphaNum.dropFirst(8).prefix(4))-\(cnpjAlphaNum.suffix(2))"
        return formatted
    }
    
    private func calculateCNPJAlphaNumCheckSum(cnpj12Digits: [Int], multiplyBy: [Int]) -> Int {
        let result = zip(cnpj12Digits, multiplyBy).map({ $0 * $1 })
        return result.reduce(0, +)
    }
    
    /// Masks a given CNPJ Alphanumeric by adding typical separators `XX.XXX.XXX/XXXX-XX`.
    ///
    /// - Parameter cnpjAlphaNum: The CNPJ Alphanumeric to be masked. It may contain non-Alphanumeric characters.
    /// - Returns: The CNPJ Alphanumeric masked in the format `XX.XXX.XXX/XXXX-XX`.
    ///
    /// - **Note**:
    /// This method can be used in a `UITextField`'s delegate to format the CNPJ Alphanumeric input while the user types.
    ///
    /// - **Example**:
    /// ```swift
    /// let cnpjAlphaNumManager = CNPJAlphaNumManager()
    /// let maskedCnpjAlphaNum = cnpjAlphaNumManager.mask(cnpj: "12ABC34501DE35")
    /// print(maskedCnpjAlphaNum)  // "12.ABC.345/01DE-35"
    /// ```
    /// **Usage in UITextField Delegate**:
    ///
    /// - Tip: In your `UITextField` delegate, you can use this method to format the CNPJ input as follows:
    ///
    /// ```swift
    /// func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
    ///     guard let currentText = textField.text else { return true }
    ///     let newText = (currentText as NSString).replacingCharacters(in: range, with: string)
    ///     textField.text = cnpjAlphaNumManager.mask(cnpj: newText)
    ///     return false // Prevent the default text change, as we are setting it manually
    /// }
    /// ```
    public func mask(cnpjAlphaNum: String) -> String {
        var originalText = cnpjAlphaNum.replacingOccurrences(of: "[^0-9A-Z]", with: "", options: .regularExpression)
        
        if originalText.count > 14 {
            originalText = String(originalText.prefix(14))
        }
        
        var maskedText = ""
        
        for (index, char) in originalText.enumerated() {
            if index == 2 || index == 5 {
                maskedText.append(".")
            } else if index == 8 {
                maskedText.append("/")
            } else if index == 12 {
                maskedText.append("-")
            }
            maskedText.append(char)
        }
        return maskedText
    }
}
